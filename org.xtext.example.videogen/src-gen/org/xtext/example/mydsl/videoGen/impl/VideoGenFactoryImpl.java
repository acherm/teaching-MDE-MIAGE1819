/**
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.videoGen.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.videoGen.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class VideoGenFactoryImpl extends EFactoryImpl implements VideoGenFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static VideoGenFactory init()
  {
    try
    {
      VideoGenFactory theVideoGenFactory = (VideoGenFactory)EPackage.Registry.INSTANCE.getEFactory(VideoGenPackage.eNS_URI);
      if (theVideoGenFactory != null)
      {
        return theVideoGenFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new VideoGenFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VideoGenFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case VideoGenPackage.VIDEO_GENERATOR_MODEL: return createVideoGeneratorModel();
      case VideoGenPackage.VIDEO_GEN_INFORMATION: return createVideoGenInformation();
      case VideoGenPackage.MEDIA: return createMedia();
      case VideoGenPackage.IMAGE: return createImage();
      case VideoGenPackage.MANDATORY_IMAGE: return createMandatoryImage();
      case VideoGenPackage.OPTIONAL_IMAGE: return createOptionalImage();
      case VideoGenPackage.ALTERNATIVE_IMAGE: return createAlternativeImage();
      case VideoGenPackage.IMAGE_DESCRIPTION: return createImageDescription();
      case VideoGenPackage.VIDEO_SEQ: return createVideoSeq();
      case VideoGenPackage.MANDATORY_VIDEO_SEQ: return createMandatoryVideoSeq();
      case VideoGenPackage.OPTIONAL_VIDEO_SEQ: return createOptionalVideoSeq();
      case VideoGenPackage.ALTERNATIVE_VIDEO_SEQ: return createAlternativeVideoSeq();
      case VideoGenPackage.VIDEO_DESCRIPTION: return createVideoDescription();
      case VideoGenPackage.TEXT: return createText();
      case VideoGenPackage.FILTER: return createFilter();
      case VideoGenPackage.BLACK_WHITE_FILTER: return createBlackWhiteFilter();
      case VideoGenPackage.NEGATE_FILTER: return createNegateFilter();
      case VideoGenPackage.FLIP_FILTER: return createFlipFilter();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VideoGeneratorModel createVideoGeneratorModel()
  {
    VideoGeneratorModelImpl videoGeneratorModel = new VideoGeneratorModelImpl();
    return videoGeneratorModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VideoGenInformation createVideoGenInformation()
  {
    VideoGenInformationImpl videoGenInformation = new VideoGenInformationImpl();
    return videoGenInformation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Media createMedia()
  {
    MediaImpl media = new MediaImpl();
    return media;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Image createImage()
  {
    ImageImpl image = new ImageImpl();
    return image;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MandatoryImage createMandatoryImage()
  {
    MandatoryImageImpl mandatoryImage = new MandatoryImageImpl();
    return mandatoryImage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionalImage createOptionalImage()
  {
    OptionalImageImpl optionalImage = new OptionalImageImpl();
    return optionalImage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlternativeImage createAlternativeImage()
  {
    AlternativeImageImpl alternativeImage = new AlternativeImageImpl();
    return alternativeImage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImageDescription createImageDescription()
  {
    ImageDescriptionImpl imageDescription = new ImageDescriptionImpl();
    return imageDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VideoSeq createVideoSeq()
  {
    VideoSeqImpl videoSeq = new VideoSeqImpl();
    return videoSeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MandatoryVideoSeq createMandatoryVideoSeq()
  {
    MandatoryVideoSeqImpl mandatoryVideoSeq = new MandatoryVideoSeqImpl();
    return mandatoryVideoSeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptionalVideoSeq createOptionalVideoSeq()
  {
    OptionalVideoSeqImpl optionalVideoSeq = new OptionalVideoSeqImpl();
    return optionalVideoSeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlternativeVideoSeq createAlternativeVideoSeq()
  {
    AlternativeVideoSeqImpl alternativeVideoSeq = new AlternativeVideoSeqImpl();
    return alternativeVideoSeq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VideoDescription createVideoDescription()
  {
    VideoDescriptionImpl videoDescription = new VideoDescriptionImpl();
    return videoDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Text createText()
  {
    TextImpl text = new TextImpl();
    return text;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Filter createFilter()
  {
    FilterImpl filter = new FilterImpl();
    return filter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlackWhiteFilter createBlackWhiteFilter()
  {
    BlackWhiteFilterImpl blackWhiteFilter = new BlackWhiteFilterImpl();
    return blackWhiteFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NegateFilter createNegateFilter()
  {
    NegateFilterImpl negateFilter = new NegateFilterImpl();
    return negateFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FlipFilter createFlipFilter()
  {
    FlipFilterImpl flipFilter = new FlipFilterImpl();
    return flipFilter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VideoGenPackage getVideoGenPackage()
  {
    return (VideoGenPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static VideoGenPackage getPackage()
  {
    return VideoGenPackage.eINSTANCE;
  }

} //VideoGenFactoryImpl
