/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VideoGenGrammarAccess extends AbstractGrammarElementFinder {
	
	public class VideoGeneratorModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.VideoGeneratorModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVideoGeneratorModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cInformationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInformationVideoGenInformationParserRuleCall_1_0 = (RuleCall)cInformationAssignment_1.eContents().get(0);
		private final Keyword cVideoGenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cMediasAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMediasMediaParserRuleCall_4_0 = (RuleCall)cMediasAssignment_4.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//VideoGeneratorModel:
		//	{VideoGeneratorModel} information=VideoGenInformation?
		//	'VideoGen' LEFT_BRACKET
		//	medias+=Media+
		//	/*videoseqs+=VideoSeq+
		//	images+=Image+*/
		//	RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//{VideoGeneratorModel} information=VideoGenInformation? 'VideoGen' LEFT_BRACKET medias+=Media+ /*videoseqs+=VideoSeq+
		//	images+=Image+*/ RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//{VideoGeneratorModel}
		public Action getVideoGeneratorModelAction_0() { return cVideoGeneratorModelAction_0; }
		
		//information=VideoGenInformation?
		public Assignment getInformationAssignment_1() { return cInformationAssignment_1; }
		
		//VideoGenInformation
		public RuleCall getInformationVideoGenInformationParserRuleCall_1_0() { return cInformationVideoGenInformationParserRuleCall_1_0; }
		
		//'VideoGen'
		public Keyword getVideoGenKeyword_2() { return cVideoGenKeyword_2; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_3() { return cLEFT_BRACKETTerminalRuleCall_3; }
		
		//medias+=Media+
		public Assignment getMediasAssignment_4() { return cMediasAssignment_4; }
		
		//Media
		public RuleCall getMediasMediaParserRuleCall_4_0() { return cMediasMediaParserRuleCall_4_0; }
		
		///*videoseqs+=VideoSeq+
		//	images+=Image+*/ RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_5() { return cRIGHT_BRACKETTerminalRuleCall_5; }
	}
	public class VideoGenInformationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.VideoGenInformation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVideoGenInformationAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAuthorKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAuthorNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAuthorNameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cAuthorNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVersionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVersionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cVersionAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCreationKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCreationDateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCreationDateSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cCreationDateAssignment_3_1.eContents().get(0);
		
		//VideoGenInformation:
		//	{VideoGenInformation} ('@author' authorName=STRING) ('@version' version=STRING)? ('@creation' creationDate=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{VideoGenInformation} ('@author' authorName=STRING) ('@version' version=STRING)? ('@creation' creationDate=STRING)?
		public Group getGroup() { return cGroup; }
		
		//{VideoGenInformation}
		public Action getVideoGenInformationAction_0() { return cVideoGenInformationAction_0; }
		
		//'@author' authorName=STRING
		public Group getGroup_1() { return cGroup_1; }
		
		//'@author'
		public Keyword getAuthorKeyword_1_0() { return cAuthorKeyword_1_0; }
		
		//authorName=STRING
		public Assignment getAuthorNameAssignment_1_1() { return cAuthorNameAssignment_1_1; }
		
		//STRING
		public RuleCall getAuthorNameSTRINGTerminalRuleCall_1_1_0() { return cAuthorNameSTRINGTerminalRuleCall_1_1_0; }
		
		//('@version' version=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'@version'
		public Keyword getVersionKeyword_2_0() { return cVersionKeyword_2_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_2_1() { return cVersionAssignment_2_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_2_1_0() { return cVersionSTRINGTerminalRuleCall_2_1_0; }
		
		//('@creation' creationDate=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'@creation'
		public Keyword getCreationKeyword_3_0() { return cCreationKeyword_3_0; }
		
		//creationDate=STRING
		public Assignment getCreationDateAssignment_3_1() { return cCreationDateAssignment_3_1; }
		
		//STRING
		public RuleCall getCreationDateSTRINGTerminalRuleCall_3_1_0() { return cCreationDateSTRINGTerminalRuleCall_3_1_0; }
	}
	public class MediaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.Media");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVideoSeqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Media:
		//	Image | VideoSeq;
		@Override public ParserRule getRule() { return rule; }
		
		//Image | VideoSeq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Image
		public RuleCall getImageParserRuleCall_0() { return cImageParserRuleCall_0; }
		
		//VideoSeq
		public RuleCall getVideoSeqParserRuleCall_1() { return cVideoSeqParserRuleCall_1; }
	}
	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.Image");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryImageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalImageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativeImageParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*
		//MediaDescription: (ImageDescription|VideoDescription);
		//MandatoryMedia : 'mandatory' description=MediaDescription;
		//
		//OptionalMedia : 'optional' description=MediaDescription;
		//
		//AlternativesMedia : 'alternatives' (id=ID)? LEFT_BRACKET medias+=MediaDescription+ RIGHT_BRACKET;
		//*/ Image:
		//	MandatoryImage | OptionalImage | AlternativeImage;
		@Override public ParserRule getRule() { return rule; }
		
		//MandatoryImage | OptionalImage | AlternativeImage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MandatoryImage
		public RuleCall getMandatoryImageParserRuleCall_0() { return cMandatoryImageParserRuleCall_0; }
		
		//OptionalImage
		public RuleCall getOptionalImageParserRuleCall_1() { return cOptionalImageParserRuleCall_1; }
		
		//AlternativeImage
		public RuleCall getAlternativeImageParserRuleCall_2() { return cAlternativeImageParserRuleCall_2; }
	}
	public class MandatoryImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.MandatoryImage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionImageDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//MandatoryImage:
		//	'mandatory' description=ImageDescription;
		@Override public ParserRule getRule() { return rule; }
		
		//'mandatory' description=ImageDescription
		public Group getGroup() { return cGroup; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }
		
		//description=ImageDescription
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//ImageDescription
		public RuleCall getDescriptionImageDescriptionParserRuleCall_1_0() { return cDescriptionImageDescriptionParserRuleCall_1_0; }
	}
	public class OptionalImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.OptionalImage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionImageDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//OptionalImage:
		//	'optional' description=ImageDescription;
		@Override public ParserRule getRule() { return rule; }
		
		//'optional' description=ImageDescription
		public Group getGroup() { return cGroup; }
		
		//'optional'
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }
		
		//description=ImageDescription
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//ImageDescription
		public RuleCall getDescriptionImageDescriptionParserRuleCall_1_0() { return cDescriptionImageDescriptionParserRuleCall_1_0; }
	}
	public class AlternativeImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.AlternativeImage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImageidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImageidIDTerminalRuleCall_1_0 = (RuleCall)cImageidAssignment_1.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cImagesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImagesImageDescriptionParserRuleCall_3_0 = (RuleCall)cImagesAssignment_3.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//AlternativeImage:
		//	'alternatives' imageid=ID? LEFT_BRACKET images+=ImageDescription+ RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//'alternatives' imageid=ID? LEFT_BRACKET images+=ImageDescription+ RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//'alternatives'
		public Keyword getAlternativesKeyword_0() { return cAlternativesKeyword_0; }
		
		//imageid=ID?
		public Assignment getImageidAssignment_1() { return cImageidAssignment_1; }
		
		//ID
		public RuleCall getImageidIDTerminalRuleCall_1_0() { return cImageidIDTerminalRuleCall_1_0; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_2() { return cLEFT_BRACKETTerminalRuleCall_2; }
		
		//images+=ImageDescription+
		public Assignment getImagesAssignment_3() { return cImagesAssignment_3; }
		
		//ImageDescription
		public RuleCall getImagesImageDescriptionParserRuleCall_3_0() { return cImagesImageDescriptionParserRuleCall_3_0; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_4() { return cRIGHT_BRACKETTerminalRuleCall_4; }
	}
	public class ImageDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.ImageDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImageidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImageidIDTerminalRuleCall_1_0 = (RuleCall)cImageidAssignment_1.eContents().get(0);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationSTRINGTerminalRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cToptextKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTopAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTopSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cTopAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cBottomtextKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cBottomAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cBottomSTRINGTerminalRuleCall_3_2_1_0 = (RuleCall)cBottomAssignment_3_2_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_3_3 = (RuleCall)cGroup_3.eContents().get(3);
		
		//ImageDescription:
		//	'image' imageid=ID? location=STRING (LEFT_BRACKET ('toptext' top=STRING) ('bottomtext' bottom=STRING) RIGHT_BRACKET)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'image' imageid=ID? location=STRING (LEFT_BRACKET ('toptext' top=STRING) ('bottomtext' bottom=STRING) RIGHT_BRACKET)?
		public Group getGroup() { return cGroup; }
		
		//'image'
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }
		
		//imageid=ID?
		public Assignment getImageidAssignment_1() { return cImageidAssignment_1; }
		
		//ID
		public RuleCall getImageidIDTerminalRuleCall_1_0() { return cImageidIDTerminalRuleCall_1_0; }
		
		//location=STRING
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_2_0() { return cLocationSTRINGTerminalRuleCall_2_0; }
		
		//(LEFT_BRACKET ('toptext' top=STRING) ('bottomtext' bottom=STRING) RIGHT_BRACKET)?
		public Group getGroup_3() { return cGroup_3; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_3_0() { return cLEFT_BRACKETTerminalRuleCall_3_0; }
		
		//'toptext' top=STRING
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'toptext'
		public Keyword getToptextKeyword_3_1_0() { return cToptextKeyword_3_1_0; }
		
		//top=STRING
		public Assignment getTopAssignment_3_1_1() { return cTopAssignment_3_1_1; }
		
		//STRING
		public RuleCall getTopSTRINGTerminalRuleCall_3_1_1_0() { return cTopSTRINGTerminalRuleCall_3_1_1_0; }
		
		//'bottomtext' bottom=STRING
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'bottomtext'
		public Keyword getBottomtextKeyword_3_2_0() { return cBottomtextKeyword_3_2_0; }
		
		//bottom=STRING
		public Assignment getBottomAssignment_3_2_1() { return cBottomAssignment_3_2_1; }
		
		//STRING
		public RuleCall getBottomSTRINGTerminalRuleCall_3_2_1_0() { return cBottomSTRINGTerminalRuleCall_3_2_1_0; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_3_3() { return cRIGHT_BRACKETTerminalRuleCall_3_3; }
	}
	public class VideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.VideoSeq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMandatoryVideoSeqParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionalVideoSeqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAlternativeVideoSeqParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//VideoSeq:
		//	MandatoryVideoSeq | OptionalVideoSeq | AlternativeVideoSeq;
		@Override public ParserRule getRule() { return rule; }
		
		//MandatoryVideoSeq | OptionalVideoSeq | AlternativeVideoSeq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MandatoryVideoSeq
		public RuleCall getMandatoryVideoSeqParserRuleCall_0() { return cMandatoryVideoSeqParserRuleCall_0; }
		
		//OptionalVideoSeq
		public RuleCall getOptionalVideoSeqParserRuleCall_1() { return cOptionalVideoSeqParserRuleCall_1; }
		
		//AlternativeVideoSeq
		public RuleCall getAlternativeVideoSeqParserRuleCall_2() { return cAlternativeVideoSeqParserRuleCall_2; }
	}
	public class MandatoryVideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.MandatoryVideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMandatoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionVideoDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//MandatoryVideoSeq:
		//	'mandatory' description=VideoDescription;
		@Override public ParserRule getRule() { return rule; }
		
		//'mandatory' description=VideoDescription
		public Group getGroup() { return cGroup; }
		
		//'mandatory'
		public Keyword getMandatoryKeyword_0() { return cMandatoryKeyword_0; }
		
		//description=VideoDescription
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//VideoDescription
		public RuleCall getDescriptionVideoDescriptionParserRuleCall_1_0() { return cDescriptionVideoDescriptionParserRuleCall_1_0; }
	}
	public class OptionalVideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.OptionalVideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionVideoDescriptionParserRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		
		//OptionalVideoSeq:
		//	'optional' description=VideoDescription;
		@Override public ParserRule getRule() { return rule; }
		
		//'optional' description=VideoDescription
		public Group getGroup() { return cGroup; }
		
		//'optional'
		public Keyword getOptionalKeyword_0() { return cOptionalKeyword_0; }
		
		//description=VideoDescription
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//VideoDescription
		public RuleCall getDescriptionVideoDescriptionParserRuleCall_1_0() { return cDescriptionVideoDescriptionParserRuleCall_1_0; }
	}
	public class AlternativeVideoSeqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.AlternativeVideoSeq");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAlternativesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoidIDTerminalRuleCall_1_0 = (RuleCall)cVideoidAssignment_1.eContents().get(0);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cVideodescsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVideodescsVideoDescriptionParserRuleCall_3_0 = (RuleCall)cVideodescsAssignment_3.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//AlternativeVideoSeq:
		//	'alternatives' videoid=ID? LEFT_BRACKET videodescs+=VideoDescription+ RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//'alternatives' videoid=ID? LEFT_BRACKET videodescs+=VideoDescription+ RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//'alternatives'
		public Keyword getAlternativesKeyword_0() { return cAlternativesKeyword_0; }
		
		//videoid=ID?
		public Assignment getVideoidAssignment_1() { return cVideoidAssignment_1; }
		
		//ID
		public RuleCall getVideoidIDTerminalRuleCall_1_0() { return cVideoidIDTerminalRuleCall_1_0; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_2() { return cLEFT_BRACKETTerminalRuleCall_2; }
		
		//videodescs+=VideoDescription+
		public Assignment getVideodescsAssignment_3() { return cVideodescsAssignment_3; }
		
		//VideoDescription
		public RuleCall getVideodescsVideoDescriptionParserRuleCall_3_0() { return cVideodescsVideoDescriptionParserRuleCall_3_0; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_4() { return cRIGHT_BRACKETTerminalRuleCall_4; }
	}
	public class VideoDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.VideoDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVideoseqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVideoidAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVideoidIDTerminalRuleCall_1_0 = (RuleCall)cVideoidAssignment_1.eContents().get(0);
		private final Assignment cLocationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLocationSTRINGTerminalRuleCall_2_0 = (RuleCall)cLocationAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cDurationKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cDurationAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cDurationINTTerminalRuleCall_3_1_1_0 = (RuleCall)cDurationAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cProbabilityKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cProbabilityAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cProbabilityPERCENTAGETerminalRuleCall_3_2_1_0 = (RuleCall)cProbabilityAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cDescriptionKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_3_3_1_0 = (RuleCall)cDescriptionAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cGroup_3.eContents().get(4);
		private final Keyword cFilterKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cFilterAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cFilterFilterParserRuleCall_3_4_1_0 = (RuleCall)cFilterAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cGroup_3.eContents().get(5);
		private final Keyword cTextKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cTextAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cTextTextParserRuleCall_3_5_1_0 = (RuleCall)cTextAssignment_3_5_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_3_6 = (RuleCall)cGroup_3.eContents().get(6);
		
		//VideoDescription:
		//	'videoseq' videoid=ID? location=STRING (LEFT_BRACKET ('duration' duration=INT)? ('probability'
		//	probability=PERCENTAGE)? ('description' description=STRING)? ('filter' filter=Filter)? ('text' text=Text)? // incrust a text into a video
		//	RIGHT_BRACKET)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'videoseq' videoid=ID? location=STRING (LEFT_BRACKET ('duration' duration=INT)? ('probability' probability=PERCENTAGE)?
		//('description' description=STRING)? ('filter' filter=Filter)? ('text' text=Text)? // incrust a text into a video
		//RIGHT_BRACKET)?
		public Group getGroup() { return cGroup; }
		
		//'videoseq'
		public Keyword getVideoseqKeyword_0() { return cVideoseqKeyword_0; }
		
		//videoid=ID?
		public Assignment getVideoidAssignment_1() { return cVideoidAssignment_1; }
		
		//ID
		public RuleCall getVideoidIDTerminalRuleCall_1_0() { return cVideoidIDTerminalRuleCall_1_0; }
		
		//location=STRING
		public Assignment getLocationAssignment_2() { return cLocationAssignment_2; }
		
		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_2_0() { return cLocationSTRINGTerminalRuleCall_2_0; }
		
		//(LEFT_BRACKET ('duration' duration=INT)? ('probability' probability=PERCENTAGE)? ('description' description=STRING)?
		//('filter' filter=Filter)? ('text' text=Text)? // incrust a text into a video
		//RIGHT_BRACKET)?
		public Group getGroup_3() { return cGroup_3; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_3_0() { return cLEFT_BRACKETTerminalRuleCall_3_0; }
		
		//('duration' duration=INT)?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//'duration'
		public Keyword getDurationKeyword_3_1_0() { return cDurationKeyword_3_1_0; }
		
		//duration=INT
		public Assignment getDurationAssignment_3_1_1() { return cDurationAssignment_3_1_1; }
		
		//INT
		public RuleCall getDurationINTTerminalRuleCall_3_1_1_0() { return cDurationINTTerminalRuleCall_3_1_1_0; }
		
		//('probability' probability=PERCENTAGE)?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'probability'
		public Keyword getProbabilityKeyword_3_2_0() { return cProbabilityKeyword_3_2_0; }
		
		//probability=PERCENTAGE
		public Assignment getProbabilityAssignment_3_2_1() { return cProbabilityAssignment_3_2_1; }
		
		//PERCENTAGE
		public RuleCall getProbabilityPERCENTAGETerminalRuleCall_3_2_1_0() { return cProbabilityPERCENTAGETerminalRuleCall_3_2_1_0; }
		
		//('description' description=STRING)?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'description'
		public Keyword getDescriptionKeyword_3_3_0() { return cDescriptionKeyword_3_3_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_3_3_1() { return cDescriptionAssignment_3_3_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_3_3_1_0() { return cDescriptionSTRINGTerminalRuleCall_3_3_1_0; }
		
		//('filter' filter=Filter)?
		public Group getGroup_3_4() { return cGroup_3_4; }
		
		//'filter'
		public Keyword getFilterKeyword_3_4_0() { return cFilterKeyword_3_4_0; }
		
		//filter=Filter
		public Assignment getFilterAssignment_3_4_1() { return cFilterAssignment_3_4_1; }
		
		//Filter
		public RuleCall getFilterFilterParserRuleCall_3_4_1_0() { return cFilterFilterParserRuleCall_3_4_1_0; }
		
		//('text' text=Text)?
		public Group getGroup_3_5() { return cGroup_3_5; }
		
		//'text'
		public Keyword getTextKeyword_3_5_0() { return cTextKeyword_3_5_0; }
		
		//text=Text
		public Assignment getTextAssignment_3_5_1() { return cTextAssignment_3_5_1; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_3_5_1_0() { return cTextTextParserRuleCall_3_5_1_0; }
		
		//// incrust a text into a video
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_3_6() { return cRIGHT_BRACKETTerminalRuleCall_3_6; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEFT_BRACKETTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cContentKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Keyword cPositionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPositionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPositionPositionParserRuleCall_4_0 = (RuleCall)cPositionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cColorKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cColorAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cColorSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cColorAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSizeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cSizeAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cSizeINTTerminalRuleCall_6_1_0 = (RuleCall)cSizeAssignment_6_1.eContents().get(0);
		private final RuleCall cRIGHT_BRACKETTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Text:
		//	LEFT_BRACKET
		//	'content' content=STRING
		//	'position' position=Position ('color' color=STRING)? ('size' size=INT)?
		//	RIGHT_BRACKET;
		@Override public ParserRule getRule() { return rule; }
		
		//LEFT_BRACKET 'content' content=STRING 'position' position=Position ('color' color=STRING)? ('size' size=INT)?
		//RIGHT_BRACKET
		public Group getGroup() { return cGroup; }
		
		//LEFT_BRACKET
		public RuleCall getLEFT_BRACKETTerminalRuleCall_0() { return cLEFT_BRACKETTerminalRuleCall_0; }
		
		//'content'
		public Keyword getContentKeyword_1() { return cContentKeyword_1; }
		
		//content=STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }
		
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }
		
		//'position'
		public Keyword getPositionKeyword_3() { return cPositionKeyword_3; }
		
		//position=Position
		public Assignment getPositionAssignment_4() { return cPositionAssignment_4; }
		
		//Position
		public RuleCall getPositionPositionParserRuleCall_4_0() { return cPositionPositionParserRuleCall_4_0; }
		
		//('color' color=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'color'
		public Keyword getColorKeyword_5_0() { return cColorKeyword_5_0; }
		
		//color=STRING
		public Assignment getColorAssignment_5_1() { return cColorAssignment_5_1; }
		
		//STRING
		public RuleCall getColorSTRINGTerminalRuleCall_5_1_0() { return cColorSTRINGTerminalRuleCall_5_1_0; }
		
		//('size' size=INT)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'size'
		public Keyword getSizeKeyword_6_0() { return cSizeKeyword_6_0; }
		
		//size=INT
		public Assignment getSizeAssignment_6_1() { return cSizeAssignment_6_1; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_6_1_0() { return cSizeINTTerminalRuleCall_6_1_0; }
		
		//RIGHT_BRACKET
		public RuleCall getRIGHT_BRACKETTerminalRuleCall_7() { return cRIGHT_BRACKETTerminalRuleCall_7; }
	}
	public class PositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.Position");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTOPKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cBOTTOMKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCENTERKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Position:
		//	'TOP' | 'BOTTOM' | 'CENTER';
		@Override public ParserRule getRule() { return rule; }
		
		//'TOP' | 'BOTTOM' | 'CENTER'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'TOP'
		public Keyword getTOPKeyword_0() { return cTOPKeyword_0; }
		
		//'BOTTOM'
		public Keyword getBOTTOMKeyword_1() { return cBOTTOMKeyword_1; }
		
		//'CENTER'
		public Keyword getCENTERKeyword_2() { return cCENTERKeyword_2; }
	}
	public class FilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.Filter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFlipFilterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNegateFilterParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBlackWhiteFilterParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Filter:
		//	FlipFilter | NegateFilter | BlackWhiteFilter;
		@Override public ParserRule getRule() { return rule; }
		
		//FlipFilter | NegateFilter | BlackWhiteFilter
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FlipFilter
		public RuleCall getFlipFilterParserRuleCall_0() { return cFlipFilterParserRuleCall_0; }
		
		//NegateFilter
		public RuleCall getNegateFilterParserRuleCall_1() { return cNegateFilterParserRuleCall_1; }
		
		//BlackWhiteFilter
		public RuleCall getBlackWhiteFilterParserRuleCall_2() { return cBlackWhiteFilterParserRuleCall_2; }
	}
	public class BlackWhiteFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.BlackWhiteFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlackWhiteFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBWKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BlackWhiteFilter:
		//	{BlackWhiteFilter}
		//	'b&w';
		@Override public ParserRule getRule() { return rule; }
		
		//{BlackWhiteFilter} 'b&w'
		public Group getGroup() { return cGroup; }
		
		//{BlackWhiteFilter}
		public Action getBlackWhiteFilterAction_0() { return cBlackWhiteFilterAction_0; }
		
		//'b&w'
		public Keyword getBWKeyword_1() { return cBWKeyword_1; }
	}
	public class NegateFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.NegateFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNegateFilterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNegateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NegateFilter:
		//	{NegateFilter}
		//	'negate';
		@Override public ParserRule getRule() { return rule; }
		
		//{NegateFilter} 'negate'
		public Group getGroup() { return cGroup; }
		
		//{NegateFilter}
		public Action getNegateFilterAction_0() { return cNegateFilterAction_0; }
		
		//'negate'
		public Keyword getNegateKeyword_1() { return cNegateKeyword_1; }
	}
	public class FlipFilterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.FlipFilter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlipKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrientationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOrientationAlternatives_1_0 = (Alternatives)cOrientationAssignment_1.eContents().get(0);
		private final Keyword cOrientationHKeyword_1_0_0 = (Keyword)cOrientationAlternatives_1_0.eContents().get(0);
		private final Keyword cOrientationHorizontalKeyword_1_0_1 = (Keyword)cOrientationAlternatives_1_0.eContents().get(1);
		private final Keyword cOrientationVKeyword_1_0_2 = (Keyword)cOrientationAlternatives_1_0.eContents().get(2);
		private final Keyword cOrientationVerticalKeyword_1_0_3 = (Keyword)cOrientationAlternatives_1_0.eContents().get(3);
		
		//FlipFilter:
		//	'flip' orientation=('h' | 'horizontal' | 'v' | 'vertical');
		@Override public ParserRule getRule() { return rule; }
		
		//'flip' orientation=('h' | 'horizontal' | 'v' | 'vertical')
		public Group getGroup() { return cGroup; }
		
		//'flip'
		public Keyword getFlipKeyword_0() { return cFlipKeyword_0; }
		
		//orientation=('h' | 'horizontal' | 'v' | 'vertical')
		public Assignment getOrientationAssignment_1() { return cOrientationAssignment_1; }
		
		//('h' | 'horizontal' | 'v' | 'vertical')
		public Alternatives getOrientationAlternatives_1_0() { return cOrientationAlternatives_1_0; }
		
		//'h'
		public Keyword getOrientationHKeyword_1_0_0() { return cOrientationHKeyword_1_0_0; }
		
		//'horizontal'
		public Keyword getOrientationHorizontalKeyword_1_0_1() { return cOrientationHorizontalKeyword_1_0_1; }
		
		//'v'
		public Keyword getOrientationVKeyword_1_0_2() { return cOrientationVKeyword_1_0_2; }
		
		//'vertical'
		public Keyword getOrientationVerticalKeyword_1_0_3() { return cOrientationVerticalKeyword_1_0_3; }
	}
	
	
	private final VideoGeneratorModelElements pVideoGeneratorModel;
	private final VideoGenInformationElements pVideoGenInformation;
	private final MediaElements pMedia;
	private final ImageElements pImage;
	private final MandatoryImageElements pMandatoryImage;
	private final OptionalImageElements pOptionalImage;
	private final AlternativeImageElements pAlternativeImage;
	private final ImageDescriptionElements pImageDescription;
	private final VideoSeqElements pVideoSeq;
	private final MandatoryVideoSeqElements pMandatoryVideoSeq;
	private final OptionalVideoSeqElements pOptionalVideoSeq;
	private final AlternativeVideoSeqElements pAlternativeVideoSeq;
	private final VideoDescriptionElements pVideoDescription;
	private final TextElements pText;
	private final PositionElements pPosition;
	private final FilterElements pFilter;
	private final BlackWhiteFilterElements pBlackWhiteFilter;
	private final NegateFilterElements pNegateFilter;
	private final FlipFilterElements pFlipFilter;
	private final TerminalRule tLEFT_BRACKET;
	private final TerminalRule tRIGHT_BRACKET;
	private final TerminalRule tPERCENTAGE;
	private final TerminalRule tFLOAT;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VideoGenGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVideoGeneratorModel = new VideoGeneratorModelElements();
		this.pVideoGenInformation = new VideoGenInformationElements();
		this.pMedia = new MediaElements();
		this.pImage = new ImageElements();
		this.pMandatoryImage = new MandatoryImageElements();
		this.pOptionalImage = new OptionalImageElements();
		this.pAlternativeImage = new AlternativeImageElements();
		this.pImageDescription = new ImageDescriptionElements();
		this.pVideoSeq = new VideoSeqElements();
		this.pMandatoryVideoSeq = new MandatoryVideoSeqElements();
		this.pOptionalVideoSeq = new OptionalVideoSeqElements();
		this.pAlternativeVideoSeq = new AlternativeVideoSeqElements();
		this.pVideoDescription = new VideoDescriptionElements();
		this.pText = new TextElements();
		this.pPosition = new PositionElements();
		this.pFilter = new FilterElements();
		this.pBlackWhiteFilter = new BlackWhiteFilterElements();
		this.pNegateFilter = new NegateFilterElements();
		this.pFlipFilter = new FlipFilterElements();
		this.tLEFT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.LEFT_BRACKET");
		this.tRIGHT_BRACKET = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.RIGHT_BRACKET");
		this.tPERCENTAGE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.PERCENTAGE");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.VideoGen.FLOAT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.VideoGen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//VideoGeneratorModel:
	//	{VideoGeneratorModel} information=VideoGenInformation?
	//	'VideoGen' LEFT_BRACKET
	//	medias+=Media+
	//	/*videoseqs+=VideoSeq+
	//	images+=Image+*/
	//	RIGHT_BRACKET;
	public VideoGeneratorModelElements getVideoGeneratorModelAccess() {
		return pVideoGeneratorModel;
	}
	
	public ParserRule getVideoGeneratorModelRule() {
		return getVideoGeneratorModelAccess().getRule();
	}
	
	//VideoGenInformation:
	//	{VideoGenInformation} ('@author' authorName=STRING) ('@version' version=STRING)? ('@creation' creationDate=STRING)?;
	public VideoGenInformationElements getVideoGenInformationAccess() {
		return pVideoGenInformation;
	}
	
	public ParserRule getVideoGenInformationRule() {
		return getVideoGenInformationAccess().getRule();
	}
	
	//Media:
	//	Image | VideoSeq;
	public MediaElements getMediaAccess() {
		return pMedia;
	}
	
	public ParserRule getMediaRule() {
		return getMediaAccess().getRule();
	}
	
	///*
	//MediaDescription: (ImageDescription|VideoDescription);
	//MandatoryMedia : 'mandatory' description=MediaDescription;
	//
	//OptionalMedia : 'optional' description=MediaDescription;
	//
	//AlternativesMedia : 'alternatives' (id=ID)? LEFT_BRACKET medias+=MediaDescription+ RIGHT_BRACKET;
	//*/ Image:
	//	MandatoryImage | OptionalImage | AlternativeImage;
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}
	
	//MandatoryImage:
	//	'mandatory' description=ImageDescription;
	public MandatoryImageElements getMandatoryImageAccess() {
		return pMandatoryImage;
	}
	
	public ParserRule getMandatoryImageRule() {
		return getMandatoryImageAccess().getRule();
	}
	
	//OptionalImage:
	//	'optional' description=ImageDescription;
	public OptionalImageElements getOptionalImageAccess() {
		return pOptionalImage;
	}
	
	public ParserRule getOptionalImageRule() {
		return getOptionalImageAccess().getRule();
	}
	
	//AlternativeImage:
	//	'alternatives' imageid=ID? LEFT_BRACKET images+=ImageDescription+ RIGHT_BRACKET;
	public AlternativeImageElements getAlternativeImageAccess() {
		return pAlternativeImage;
	}
	
	public ParserRule getAlternativeImageRule() {
		return getAlternativeImageAccess().getRule();
	}
	
	//ImageDescription:
	//	'image' imageid=ID? location=STRING (LEFT_BRACKET ('toptext' top=STRING) ('bottomtext' bottom=STRING) RIGHT_BRACKET)?;
	public ImageDescriptionElements getImageDescriptionAccess() {
		return pImageDescription;
	}
	
	public ParserRule getImageDescriptionRule() {
		return getImageDescriptionAccess().getRule();
	}
	
	//VideoSeq:
	//	MandatoryVideoSeq | OptionalVideoSeq | AlternativeVideoSeq;
	public VideoSeqElements getVideoSeqAccess() {
		return pVideoSeq;
	}
	
	public ParserRule getVideoSeqRule() {
		return getVideoSeqAccess().getRule();
	}
	
	//MandatoryVideoSeq:
	//	'mandatory' description=VideoDescription;
	public MandatoryVideoSeqElements getMandatoryVideoSeqAccess() {
		return pMandatoryVideoSeq;
	}
	
	public ParserRule getMandatoryVideoSeqRule() {
		return getMandatoryVideoSeqAccess().getRule();
	}
	
	//OptionalVideoSeq:
	//	'optional' description=VideoDescription;
	public OptionalVideoSeqElements getOptionalVideoSeqAccess() {
		return pOptionalVideoSeq;
	}
	
	public ParserRule getOptionalVideoSeqRule() {
		return getOptionalVideoSeqAccess().getRule();
	}
	
	//AlternativeVideoSeq:
	//	'alternatives' videoid=ID? LEFT_BRACKET videodescs+=VideoDescription+ RIGHT_BRACKET;
	public AlternativeVideoSeqElements getAlternativeVideoSeqAccess() {
		return pAlternativeVideoSeq;
	}
	
	public ParserRule getAlternativeVideoSeqRule() {
		return getAlternativeVideoSeqAccess().getRule();
	}
	
	//VideoDescription:
	//	'videoseq' videoid=ID? location=STRING (LEFT_BRACKET ('duration' duration=INT)? ('probability'
	//	probability=PERCENTAGE)? ('description' description=STRING)? ('filter' filter=Filter)? ('text' text=Text)? // incrust a text into a video
	//	RIGHT_BRACKET)?;
	public VideoDescriptionElements getVideoDescriptionAccess() {
		return pVideoDescription;
	}
	
	public ParserRule getVideoDescriptionRule() {
		return getVideoDescriptionAccess().getRule();
	}
	
	//Text:
	//	LEFT_BRACKET
	//	'content' content=STRING
	//	'position' position=Position ('color' color=STRING)? ('size' size=INT)?
	//	RIGHT_BRACKET;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Position:
	//	'TOP' | 'BOTTOM' | 'CENTER';
	public PositionElements getPositionAccess() {
		return pPosition;
	}
	
	public ParserRule getPositionRule() {
		return getPositionAccess().getRule();
	}
	
	//Filter:
	//	FlipFilter | NegateFilter | BlackWhiteFilter;
	public FilterElements getFilterAccess() {
		return pFilter;
	}
	
	public ParserRule getFilterRule() {
		return getFilterAccess().getRule();
	}
	
	//BlackWhiteFilter:
	//	{BlackWhiteFilter}
	//	'b&w';
	public BlackWhiteFilterElements getBlackWhiteFilterAccess() {
		return pBlackWhiteFilter;
	}
	
	public ParserRule getBlackWhiteFilterRule() {
		return getBlackWhiteFilterAccess().getRule();
	}
	
	//NegateFilter:
	//	{NegateFilter}
	//	'negate';
	public NegateFilterElements getNegateFilterAccess() {
		return pNegateFilter;
	}
	
	public ParserRule getNegateFilterRule() {
		return getNegateFilterAccess().getRule();
	}
	
	//FlipFilter:
	//	'flip' orientation=('h' | 'horizontal' | 'v' | 'vertical');
	public FlipFilterElements getFlipFilterAccess() {
		return pFlipFilter;
	}
	
	public ParserRule getFlipFilterRule() {
		return getFlipFilterAccess().getRule();
	}
	
	//terminal LEFT_BRACKET:
	//	'{';
	public TerminalRule getLEFT_BRACKETRule() {
		return tLEFT_BRACKET;
	}
	
	//terminal RIGHT_BRACKET:
	//	'}';
	public TerminalRule getRIGHT_BRACKETRule() {
		return tRIGHT_BRACKET;
	}
	
	//terminal PERCENTAGE returns ecore::EInt:
	//	'1'..'9' '0'..'9'? | '100';
	public TerminalRule getPERCENTAGERule() {
		return tPERCENTAGE;
	}
	
	//terminal FLOAT returns ecore::EFloat:
	//	INT '.' INT;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
